import time
from multiprocessing import Pool
import streamlit as st
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from app.logging_config import LoggedSession
from scipy.stats import skew, kurtosis


def display_descriptive_statistics(city_data):
    st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    desc_stats = city_data.describe()

    skewness = skew(city_data["temperature"])
    kurt = kurtosis(city_data["temperature"])

    st.write(desc_stats)

    mean_temp = desc_stats.loc["mean", "temperature"]
    median_temp = desc_stats.loc["50%", "temperature"]
    std_temp = desc_stats.loc["std", "temperature"]
    min_temp = desc_stats.loc["min", "temperature"]
    max_temp = desc_stats.loc["max", "temperature"]
    q1_temp = desc_stats.loc["25%", "temperature"]
    q3_temp = desc_stats.loc["75%", "temperature"]

    st.markdown(f"### –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")

    with st.expander(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
        st.markdown(f"""
        - **–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: `{mean_temp:.2f}¬∞C`.
        - **–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: `{median_temp:.2f}¬∞C`.
            - {"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –º–µ–¥–∏–∞–Ω–µ, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ." if abs(mean_temp - median_temp) < 1 else "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–µ–¥–∏–∞–Ω—ã, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ."}
        -----
        - **–†–∞–∑–±—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã**:
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: `{std_temp:.2f}¬∞C`.
            - {"`–†–∞–∑–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ–±–æ–ª—å—à–æ–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞.`" if std_temp < 5 else "`–†–∞–∑–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è.`"}
        -----
        - **–î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä**:
            - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{min_temp:.2f}¬∞C`.
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{max_temp:.2f}¬∞C`.
            - –û–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: `{max_temp - min_temp:.2f}¬∞C`.
        """)

    st.markdown(f"### –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")

    with st.expander(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"):
        st.markdown(f"""
        #### –°–∫–æ—à–µ–Ω–Ω–æ—Å—Ç—å (skewness):
        - **–ó–Ω–∞—á–µ–Ω–∏–µ**: `{skewness:.2f}`
        - **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è**:
            - {"`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤—ã–π —Å–∫–æ—Å (–¥–ª–∏–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç —Å–ø—Ä–∞–≤–∞).`" if skewness > 0 else "`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ª–µ–≤—ã–π —Å–∫–æ—Å (–¥–ª–∏–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç —Å–ª–µ–≤–∞)." if skewness < 0 else "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ.`"}
        -----
        """)

        st.markdown(f"""
        #### –≠–∫—Å—Ü–µ—Å—Å (kurtosis):
        - **–ó–Ω–∞—á–µ–Ω–∏–µ**: `{kurt:.2f}`
        - **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è**:
            - {"`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ—Å—Ç—Ä—ã–π –ø–∏–∫ –∏ —Ç—è–∂–µ–ª—ã–µ —Ö–≤–æ—Å—Ç—ã (–±–æ–ª—å—à–µ –≤—ã–±—Ä–æ—Å–æ–≤).`" if kurt > 0 else "`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø–ª–æ—Å–∫–∏–π –ø–∏–∫ –∏ –ª–µ–≥–∫–∏–µ —Ö–≤–æ—Å—Ç—ã (–º–µ–Ω—å—à–µ –≤—ã–±—Ä–æ—Å–æ–≤).`" if kurt < 0 else "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É."}
        -----
        """)

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    fig = px.histogram(city_data, x="temperature", nbins=30, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")

    fig.add_vline(x=mean_temp, line_dash="dash", line_color="red", annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {mean_temp:.2f}¬∞C",
                  annotation_position="top")
    fig.add_vline(x=median_temp, line_dash="dash", line_color="green", annotation_text=f"–ú–µ–¥–∏–∞–Ω–∞: {median_temp:.2f}¬∞C",
                  annotation_position="bottom")
    fig.add_vline(x=q1_temp, line_dash="dot", line_color="blue", annotation_text=f"25%: {q1_temp:.2f}¬∞C",
                  annotation_position="top")
    fig.add_vline(x=q3_temp, line_dash="dot", line_color="blue", annotation_text=f"75%: {q3_temp:.2f}¬∞C",
                  annotation_position="top")

    fig.add_vrect(
        x0=mean_temp - std_temp, x1=mean_temp + std_temp,
        fillcolor="lightgray", opacity=0.5,
        annotation_text=f"¬±1œÉ: {std_temp:.2f}¬∞C", annotation_position="top"
    )

    st.plotly_chart(fig, use_container_width=True)


def display_temperature_time_series(city_data, city):
    st.subheader("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")

    threshold = np.percentile(city_data["temperature"], 90)
    city_data["is_anomaly"] = city_data["temperature"] > threshold

    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=city_data["timestamp"],
            y=city_data["temperature"],
            mode="lines",
            name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            line=dict(color="blue", width=2),
        )
    )
    fig.add_trace(
        go.Scatter(
            x=city_data[city_data["is_anomaly"]]["timestamp"],
            y=city_data[city_data["is_anomaly"]]["temperature"],
            mode="markers",
            name="–ê–Ω–æ–º–∞–ª–∏–∏",
            marker=dict(color="red", size=8),
        )
    )
    fig.update_layout(
        title=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        hovermode="x unified",
    )
    st.plotly_chart(fig, use_container_width=True)


def display_correlation_analysis(city_data):
    if "humidity" in city_data.columns and "pressure" in city_data.columns:
        st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        corr_matrix = city_data[["temperature", "humidity", "pressure"]].corr()
        fig = px.imshow(corr_matrix, text_auto=True, title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        st.plotly_chart(fig, use_container_width=True)


def display_seasonal_profiles(city_data, city):
    st.subheader("–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")

    seasonal_data = city_data.groupby("season")["temperature"].agg(
        [("mean", "mean"), ("median", "median"), ("q1", lambda x: x.quantile(0.25)), ("q3", lambda x: x.quantile(0.75)), ("count", "size")]
    ).reset_index()

    fig = go.Figure()
    fig.add_trace(
        go.Bar(
            x=seasonal_data["season"],
            y=seasonal_data["mean"],
            error_y=dict(type="data", array=seasonal_data["mean"] - seasonal_data["q1"], visible=True),
            name="–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        )
    )
    fig.update_layout(
        title=f"–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ {city}",
        xaxis_title="–°–µ–∑–æ–Ω",
        yaxis_title="–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
    )
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("### –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:")
    for index, row in seasonal_data.iterrows():
        season = row["season"]
        mean_temp = row["mean"]
        median_temp = row["median"]
        q1_temp = row["q1"]
        q3_temp = row["q3"]
        count = row["count"]

        with st.expander(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è **{season}**"):
            st.markdown(f"""
            #### –°–µ–∑–æ–Ω: **{season}**
            - **–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: `{mean_temp:.2f}¬∞C`
            - **–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: `{median_temp:.2f}¬∞C`
            - **25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q1)**: `{q1_temp:.2f}¬∞C`
            - **75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q3)**: `{q3_temp:.2f}¬∞C`
            - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö**: `{count}`
            """)

            if mean_temp > median_temp:
                st.markdown(f"–í —Å–µ–∑–æ–Ω–µ **{season}** —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π.")
            elif mean_temp < median_temp:
                st.markdown(f"–í —Å–µ–∑–æ–Ω–µ **{season}** —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π.")
            else:
                st.markdown(f"–í —Å–µ–∑–æ–Ω–µ **{season}** —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –º–µ–¥–∏–∞–Ω–µ, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")

            iqr = q3_temp - q1_temp
            st.markdown(f"–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR): `{iqr:.2f}¬∞C`.")
            if iqr < 5:
                st.markdown(f"–†–∞–∑–±—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Å–µ–∑–æ–Ω–µ **{season}** –Ω–µ–±–æ–ª—å—à–æ–π, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.")
            else:
                st.markdown(f"–†–∞–∑–±—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Å–µ–∑–æ–Ω–µ **{season}** –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω—á–∏–≤—ã–µ —É—Å–ª–æ–≤–∏—è.")


def calculate_moving_average(data, window=30):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    return data["temperature"].rolling(window=window, min_periods=1).mean()


def detect_anomalies(data):
    """–í—ã—è–≤–ª—è–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏, –≥–¥–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ä–µ–¥–Ω–µ–µ ¬± 2œÉ."""
    mean = data["temperature"].mean()
    std = data["temperature"].std()
    data["is_anomaly"] = (data["temperature"] < (mean - 2 * std)) | (data["temperature"] > (mean + 2 * std))
    return data


def analyze_city(city_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    city_data = city_data.copy()
    city_data["moving_avg"] = calculate_moving_average(city_data)
    city_data = detect_anomalies(city_data)
    return city_data


def analyze_data_parallel(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    cities = df["city"].unique()
    with Pool() as pool:
        results = pool.map(analyze_city, [df[df["city"] == city] for city in cities])
    return results


def analyze_data_sequential(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."""
    results = []
    for city in df["city"].unique():
        city_data = df[df["city"] == city]
        results.append(analyze_city(city_data))
    return results


def display_moving_average(city_data, city):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    st.subheader("–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (30 –¥–Ω–µ–π)")
    fig = px.line(city_data, x="timestamp", y="moving_avg", title=f"–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ {city}")
    st.plotly_chart(fig, use_container_width=True)


def display_anomalies(city_data, city):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    st.subheader("–ê–Ω–æ–º–∞–ª–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    anomalies = city_data[city_data["is_anomaly"]]
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π: {len(anomalies)}")
    fig = px.scatter(anomalies, x="timestamp", y="temperature", title=f"–ê–Ω–æ–º–∞–ª–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ {city}")
    st.plotly_chart(fig, use_container_width=True)


def analyze_data(session: LoggedSession):
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    if not hasattr(session, "df"):
        st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ 'üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'.")
        return

    df = session.df

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", df["city"].unique(), key="city_selectbox")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥—É
    city_data = df[df["city"] == city]

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)
    analysis_mode = st.radio("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞", ["–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π"])

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        start_time = time.time()

        if analysis_mode == "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π":
            st.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            results = analyze_data_parallel(df)
        else:
            st.info("–ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            results = analyze_data_sequential(df)

        end_time = time.time()
        st.success(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥.")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        for result in results:
            if result["city"].iloc[0] == city:
                city_data = result
                break

        display_descriptive_statistics(city_data)
        display_temperature_time_series(city_data, city)
        display_moving_average(city_data, city)
        display_anomalies(city_data, city)
        display_correlation_analysis(city_data)
        display_seasonal_profiles(city_data, city)
